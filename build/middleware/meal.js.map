{"version":3,"sources":["../../server/src/middleware/meal.js"],"names":["MealMiddleware","req","res","next","schema","name","Joi","string","required","price","number","min","validate","body","files","Error","imageMimes","includes","image","mimetype","details","undefined","message","String","status","json","type","mealId","quantity"],"mappings":"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","sourcesContent":["import Joi from 'joi';\r\n\r\nclass MealMiddleware {\r\n    static async validateAddMeal(req, res, next) {\r\n        try {\r\n            const schema = {\r\n                name: Joi.string().required(),\r\n                price: Joi.number()\r\n                    .min(1)\r\n                    .required()\r\n            };\r\n            await Joi.validate(req.body, schema);\r\n            if (req.files === null) {\r\n                throw new Error('Meal Image Required');\r\n            }\r\n            const imageMimes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n            if (!imageMimes.includes(req.files.image.mimetype)) {\r\n                throw new Error('Only JPG, JPEG & PNG Images are allowed');\r\n            }\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            let message;\r\n            if (err.details !== undefined) {\r\n                message = String(err.details[0].message);\r\n            } else {\r\n                message = String(err.message);\r\n            }\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message,\r\n                type: 'validation'\r\n            });\r\n        }\r\n    }\r\n\r\n    static async validateUpdateMeal(req, res, next) {\r\n        try {\r\n            const schema = {\r\n                name: Joi.string(),\r\n                price: Joi.number().min(1)\r\n            };\r\n            await Joi.validate(req.body, schema);\r\n            if (req.files !== null) {\r\n                const imageMimes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n                if (!imageMimes.includes(req.files.image.mimetype)) {\r\n                    throw new Error('Only JPG, JPEG & PNG Images are allowed');\r\n                }\r\n            }\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            let message;\r\n            if (err.details !== undefined) {\r\n                message = String(err.details[0].message);\r\n            } else {\r\n                message = String(err.message);\r\n            }\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message,\r\n                type: 'validation'\r\n            });\r\n        }\r\n    }\r\n\r\n    static async validateAddMealToMenu(req, res, next) {\r\n        try {\r\n            const schema = {\r\n                mealId: Joi.number().required(),\r\n                quantity: Joi.number()\r\n                    .min(1)\r\n                    .required()\r\n            };\r\n            await Joi.validate(req.body, schema);\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            let message;\r\n            if (err.details !== undefined) {\r\n                message = String(err.details[0].message);\r\n            } else {\r\n                message = String(err.message);\r\n            }\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message,\r\n                type: 'validation'\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default MealMiddleware;\r\n"],"file":"meal.js"}