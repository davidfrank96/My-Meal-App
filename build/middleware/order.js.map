{"version":3,"sources":["../../server/src/middleware/order.js"],"names":["OrderMiddleware","req","res","next","schema","mealId","Joi","number","min","required","quantity","validate","body","status","json","message","String","details","type","action","string","includes","Error","undefined"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;IAEMA,e;;;;;;;;;;;;+CAC8BC,G,EAAKC,G,EAAKC,I;;;;;;;;AAE5BC,gBAAAA,O,GAAS;AACXC,kBAAAA,MAAM,EAAEC,aAAIC,MAAJ,GACHC,GADG,CACC,CADD,EAEHC,QAFG,EADG;AAIXC,kBAAAA,QAAQ,EAAEJ,aAAIC,MAAJ,GACLC,GADK,CACD,CADC,EAELC,QAFK;AAJC,iB;;uBAQTH,aAAIK,QAAJ,CAAaV,GAAG,CAACW,IAAjB,EAAuBR,OAAvB,C;;;AACND,gBAAAA,IAAI;iDACG,I;;;;;iDAEAD,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAEC,MAAM,CAAC,YAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAFS;AAGxBG,kBAAAA,IAAI,EAAE;AAHkB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAQkBjB,G,EAAKC,G,EAAKC,I;;;;;;;;AAE7BC,gBAAAA,Q,GAAS;AACXe,kBAAAA,MAAM,EAAEb,aAAIc,MAAJ,GAAaX,QAAb;AADG,iB;;uBAGTH,aAAIK,QAAJ,CAAaV,GAAG,CAACW,IAAjB,EAAuBR,QAAvB,C;;;oBACD,CAAC,UAAD,EAAa,UAAb,EAAyB,QAAzB,EAAmCiB,QAAnC,CAA4CpB,GAAG,CAACW,IAAJ,CAASO,MAArD,C;;;;;sBACK,IAAIG,KAAJ,CAAU,0BAAV,C;;;AAEVnB,gBAAAA,IAAI;kDACG,I;;;;;;AAGP,oBAAI,aAAIc,OAAJ,KAAgBM,SAApB,EAA+B;AAC3BR,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAAhB;AACH,iBAFD,MAEO;AACHA,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAID,OAAL,CAAhB;AACH;;kDACMb,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAPA,OAFwB;AAGxBG,kBAAAA,IAAI,EAAE;AAHkB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAQmBjB,G,EAAKC,G,EAAKC,I;;;;;;;;uBAE9BG,aAAIK,QAAJ,CAAaV,GAAG,CAACW,IAAjB,EAAuBR,MAAvB,C;;;AACND,gBAAAA,IAAI;kDACG,I;;;;;;AAGP,oBAAI,aAAIc,OAAJ,KAAgBM,SAApB,EAA+B;AAC3BR,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAIC,OAAJ,CAAY,CAAZ,EAAeF,OAAhB,CAAhB;AACH,iBAFD,MAEO;AACHA,kBAAAA,OAAO,GAAGC,MAAM,CAAC,aAAID,OAAL,CAAhB;AACH;;kDACMb,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAPA,OAFwB;AAGxBG,kBAAAA,IAAI,EAAE;AAHkB,iBAArB,C;;;;;;;;;;;;;;;;;;;;;eASJlB,e","sourcesContent":["import Joi from 'joi';\r\n\r\nclass OrderMiddleware {\r\n    static async validateAddToOrder(req, res, next) {\r\n        try {\r\n            const schema = {\r\n                mealId: Joi.number()\r\n                    .min(1)\r\n                    .required(),\r\n                quantity: Joi.number()\r\n                    .min(1)\r\n                    .required()\r\n            };\r\n            await Joi.validate(req.body, schema);\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message: String(err.details[0].message),\r\n                type: 'validation'\r\n            });\r\n        }\r\n    }\r\n\r\n    static async validateModifyOrder(req, res, next) {\r\n        try {\r\n            const schema = {\r\n                action: Joi.string().required()\r\n            };\r\n            await Joi.validate(req.body, schema);\r\n            if (!['increase', 'decrease', 'delete'].includes(req.body.action)) {\r\n                throw new Error('Invalid Action Requested');\r\n            }\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            let message;\r\n            if (err.details !== undefined) {\r\n                message = String(err.details[0].message);\r\n            } else {\r\n                message = String(err.message);\r\n            }\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message,\r\n                type: 'validation'\r\n            });\r\n        }\r\n    }\r\n\r\n    static async validateOrdeCheckout(req, res, next) {\r\n        try {\r\n            await Joi.validate(req.body, schema);\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            let message;\r\n            if (err.details !== undefined) {\r\n                message = String(err.details[0].message);\r\n            } else {\r\n                message = String(err.message);\r\n            }\r\n            return res.status(400).json({\r\n                status: 'error',\r\n                message,\r\n                type: 'validation'\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default OrderMiddleware;\r\n"],"file":"order.js"}