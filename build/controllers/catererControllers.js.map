{"version":3,"sources":["../../server/src/controllers/catererControllers.js"],"names":["CatererController","req","res","body","name","email","password","bcrypt","hash","Caterer","create","caterer","safeCaterer","id","jwtToken","jwt","sign","isCaterer","secret","expiresIn","status","json","message","token","findOne","where","Error","compare","result","user"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\n//import Caterer from '../models/caterer';\r\nimport secret from \"../db/jwt_secret\";\r\n\r\nclass CatererController {\r\n    static async registerCaterer(req, res) {\r\n        try {\r\n            const {\r\n              name,\r\n              email,\r\n              password\r\n            } = req.body;\r\n            const hash = await bcrypt.hash(password, 10);\r\n            const caterer = await Caterer.create({\r\n              name,\r\n              email,\r\n              password: hash\r\n            });\r\n            const safeCaterer = {\r\n                id: 2,\r\n                name: caterer.name,\r\n                email: caterer.email,\r\n                \r\n            };\r\n            const jwtToken = jwt.sign({ caterer: safeCaterer, isCaterer: true }, secret, {\r\n                expiresIn: 86400\r\n            });\r\n            return res.status(201).json({\r\n                status: 'success',\r\n                message: 'Caterer Registered',\r\n                token: `Bearer ${jwtToken}`,\r\n                caterer: safeCaterer\r\n            });\r\n        } catch (err) {\r\n            return res.status(500).json({\r\n                status: 'error',\r\n                message: err.message\r\n            });\r\n        }\r\n    }\r\n\r\n    static async loginCaterer(req, res) {\r\n        try {\r\n            const { email, password } = req.body;\r\n            const caterer = await Caterer.findOne({ where: { email } });\r\n            if (!caterer) {\r\n                throw new Error('Caterer with that email does not exist');\r\n            }\r\n            const result = await bcrypt.compare(password, caterer.password);\r\n            if (!result) {\r\n                throw new Error(\"Password doesn't match our records\");\r\n            }\r\n            const safeCaterer = {\r\n                id: caterer.id,\r\n                name: caterer.name,\r\n                email: caterer.email,\r\n                \r\n            };\r\n            const jwtToken = jwt.sign({ caterer: safeCaterer, isCaterer: true }, secret, {\r\n                expiresIn: 86400\r\n            });\r\n            return res.status(200).json({\r\n                status: 'success',\r\n                message: 'Caterer Logged In',\r\n                token: `Bearer ${jwtToken}`,\r\n                user: safeCaterer\r\n            });\r\n        } catch (err) {\r\n            return res.status(500).json({\r\n                status: 'error',\r\n                message: err.message\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default CatererController;\r\n"],"file":"catererControllers.js"}