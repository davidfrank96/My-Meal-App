{"version":3,"sources":["../../server/src/controllers/menuControllers.js"],"names":["MenuControllers","date","Date","month","getMonth","today","getFullYear","padStart","getDate","req","res","generateDate","Menu","findAll","where","createdAt","menu","status","json","message","data","findOne","catererId","safeMeal","mealId","quantity","meals","dataValues","updatedMenuMeals","JSON","parse","mealIndex","findIndex","menuMeal","id","Number","push","Error","body","Meal","meal","updatedAt","MenuController","length","menuMeals","create","stringify","update","updateMeals"],"mappings":"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","sourcesContent":["//import Menu from \"../models/menu\";\r\n//import Meal from \"../models/meals\";\r\n\r\nclass MenuControllers {\r\n  static generateDate() {\r\n    const date = new Date();\r\n    const month = `${date.getMonth() + 1}`;\r\n    const today = `${date.getFullYear()}-${month.padStart(\r\n      2,\r\n      \"0\"\r\n    )}-${date.getDate()}`;\r\n    return today;\r\n  }\r\n\r\n  static async getMenu(req, res) {\r\n    try {\r\n      const today = MenuControllers.generateDate();\r\n      const menu = await Menu.findAll({ where: { createdAt: today } });\r\n      return res.status(200).json({\r\n        status: \"success\",\r\n        message: \"Menus Retrieved\",\r\n        data: menu\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: \"error\",\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async getSingleMenu(req, res) {\r\n    try {\r\n      const today = MenuControllers.generateDate();\r\n      const menu = await Menu.findOne({\r\n        where: { createdAt: today, catererId: 2 }\r\n      });\r\n      return res.status(200).json({\r\n        status: \"success\",\r\n        message: \"Caterer Menu Retrieved\",\r\n        data: menu\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: \"error\",\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n\r\n  static async updateMeals(menu, safeMeal, mealId, quantity) {\r\n    try {\r\n      const { meals } = menu.dataValues;\r\n      const updatedMenuMeals = JSON.parse(meals);\r\n      const mealIndex = updatedMenuMeals.findIndex(\r\n        menuMeal => menuMeal.id === Number(mealId)\r\n      );\r\n      if (mealIndex < 0) {\r\n        updatedMenuMeals.push(safeMeal);\r\n      } else {\r\n        updatedMenuMeals[mealIndex].quantity += Number(quantity);\r\n      }\r\n      return updatedMenuMeals;\r\n    } catch (err) {\r\n      throw new Error(`Update - ${err.message}`);\r\n    }\r\n  }\r\n\r\n  static async postMenu(req, res) {\r\n    try {\r\n      const { mealId, quantity } = req.body;\r\n      const meal = await Meal.findOne({ where: { id: mealId, catererId: 2 } });\r\n      if (!meal) {\r\n        throw new Error(`Meal with that ID Doesn't exist`);\r\n      }\r\n      const { createdAt, updatedAt, ...safeMeal } = meal.dataValues;\r\n      safeMeal.quantity = Number(quantity);\r\n      const today = MenuController.generateDate();\r\n      const menu = await Menu.findAll({\r\n        where: { catererId: 2, createdAt: today }\r\n      });\r\n      let menuMeals;\r\n      if (menu.length === 0) {\r\n        menuMeals = [];\r\n        menuMeals.push(safeMeal);\r\n        await Menu.create({\r\n          meals: JSON.stringify(menuMeals),\r\n          catererId: 2\r\n        });\r\n        await Meal.update({ quantity }, { where: { id: mealId } });\r\n      } else {\r\n        menuMeals = await MenuController.updateMeals(\r\n          menu[0],\r\n          safeMeal,\r\n          mealId,\r\n          quantity\r\n        );\r\n        await Menu.update(\r\n          { meals: JSON.stringify(menuMeals) },\r\n          { where: { catererId: 2, createdAt: today } }\r\n        );\r\n        const mealIndex = menuMeals.findIndex(\r\n          menuMeal => menuMeal.id === Number(mealId)\r\n        );\r\n        await Meal.update(\r\n          { quantity: menuMeals[mealIndex].quantity },\r\n          { where: { id: mealId } }\r\n        );\r\n      }\r\n      return res.status(200).json({\r\n        status: \"success\",\r\n        message: \"Meal Added to Menu\",\r\n        data: menuMeals\r\n      });\r\n    } catch (err) {\r\n      return res.status(500).json({\r\n        status: \"error\",\r\n        message: err.message\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default MenuControllers;\r\n"],"file":"menuControllers.js"}