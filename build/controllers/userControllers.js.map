{"version":3,"sources":["../../server/src/controllers/userControllers.js"],"names":["UserController","req","res","body","name","email","password","bcrypt","hash","User","create","user","safeUser","id","jwtToken","jwt","sign","secret","expiresIn","status","json","message","token","findOne","where","Error","compare","result"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;;;;;;;IAEMA,c;;;;;;;;;;;;+CACwBC,G,EAAKC,G;;;;;;;;4BAEWD,GAAG,CAACE,I,EAA9BC,I,aAAAA,I,EAAMC,K,aAAAA,K,EAAOC,Q,aAAAA,Q;;uBACFC,gBAAOC,IAAP,CAAYF,QAAZ,EAAsB,EAAtB,C;;;AAAbE,gBAAAA,I;;uBACaC,IAAI,CAACC,MAAL,CAAY;AAAEN,kBAAAA,IAAI,EAAJA,IAAF;AAAQC,kBAAAA,KAAK,EAALA,KAAR;AAAeC,kBAAAA,QAAQ,EAAEE;AAAzB,iBAAZ,C;;;AAAbG,gBAAAA,I;AACAC,gBAAAA,Q,GAAW;AACbC,kBAAAA,EAAE,EAAEF,IAAI,CAACE,EADI;AAEbT,kBAAAA,IAAI,EAAEO,IAAI,CAACP,IAFE;AAGbC,kBAAAA,KAAK,EAAEM,IAAI,CAACN;AAHC,iB;AAMXS,gBAAAA,Q,GAAWC,sBAAIC,IAAJ,CAAS;AAAEL,kBAAAA,IAAI,EAAEC;AAAR,iBAAT,EAA6BK,mBAA7B,EAAqC;AAClDC,kBAAAA,SAAS,EAAE;AADuC,iBAArC,C;iDAGVhB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,SADgB;AAExBE,kBAAAA,OAAO,EAAE,iBAFe;AAGxBC,kBAAAA,KAAK,mBAAYR,QAAZ,CAHmB;AAIxBH,kBAAAA,IAAI,EAAEC;AAJkB,iBAArB,C;;;;;iDAOAV,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE,YAAIA;AAFW,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOQpB,G,EAAKC,G;;;;;;;;6BAEQD,GAAG,CAACE,I,EAAxBE,K,cAAAA,K,EAAOC,Q,cAAAA,Q;;uBACIG,IAAI,CAACc,OAAL,CAAa;AAAEC,kBAAAA,KAAK,EAAE;AAAEnB,oBAAAA,KAAK,EAALA;AAAF;AAAT,iBAAb,C;;;AAAbM,gBAAAA,I;;oBACDA,I;;;;;sBACK,IAAIc,KAAJ,CAAU,qCAAV,C;;;;uBAEWlB,gBAAOmB,OAAP,CAAepB,QAAf,EAAyBK,IAAI,CAACL,QAA9B,C;;;AAAfqB,gBAAAA,M;;oBACDA,M;;;;;sBACK,IAAIF,KAAJ,CAAU,oCAAV,C;;;AAEJb,gBAAAA,Q,GAAW;AACbC,kBAAAA,EAAE,EAAEF,IAAI,CAACE,EADI;AAEbT,kBAAAA,IAAI,EAAEO,IAAI,CAACP,IAFE;AAGbC,kBAAAA,KAAK,EAAEM,IAAI,CAACN;AAHC,iB;AAMXS,gBAAAA,Q,GAAWC,sBAAIC,IAAJ,CAAS;AAAEL,kBAAAA,IAAI,EAAEC;AAAR,iBAAT,EAA6BK,mBAA7B,EAAqC;AAClDC,kBAAAA,SAAS,EAAE;AADuC,iBAArC,C;kDAGVhB,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,SADgB;AAExBE,kBAAAA,OAAO,EAAE,gBAFe;AAGxBC,kBAAAA,KAAK,mBAAYR,QAAZ,CAHmB;AAIxBH,kBAAAA,IAAI,EAAEC;AAJkB,iBAArB,C;;;;;kDAOAV,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE,aAAIA;AAFW,iBAArB,C;;;;;;;;;;;;;;;;;;;;;eAQJrB,c","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcrypt';\r\n//import User from '../models/user';\r\nimport secret from \"../db/jwt_secret\";\r\n\r\nclass UserController {\r\n    static async registerUser(req, res) {\r\n        try {\r\n            const { name, email, password } = req.body;\r\n            const hash = await bcrypt.hash(password, 10);\r\n            const user = await User.create({ name, email, password: hash });\r\n            const safeUser = {\r\n                id: user.id,\r\n                name: user.name,\r\n                email: user.email\r\n               \r\n            };\r\n            const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n                expiresIn: 86400\r\n            });\r\n            return res.status(201).json({\r\n                status: 'success',\r\n                message: 'User Registered',\r\n                token: `Bearer ${jwtToken}`,\r\n                user: safeUser\r\n            });\r\n        } catch (err) {\r\n            return res.status(500).json({\r\n                status: 'error',\r\n                message: err.message\r\n            });\r\n        }\r\n    }\r\n\r\n    static async loginUser(req, res) {\r\n        try {\r\n            const { email, password } = req.body;\r\n            const user = await User.findOne({ where: { email } });\r\n            if (!user) {\r\n                throw new Error('User with that email does not exist');\r\n            }\r\n            const result = await bcrypt.compare(password, user.password);\r\n            if (!result) {\r\n                throw new Error(\"Password doesn't match our records\");\r\n            }\r\n            const safeUser = {\r\n                id: user.id,\r\n                name: user.name,\r\n                email: user.email\r\n                \r\n            };\r\n            const jwtToken = jwt.sign({ user: safeUser }, secret, {\r\n                expiresIn: 86400\r\n            });\r\n            return res.status(200).json({\r\n                status: 'success',\r\n                message: 'User Logged In',\r\n                token: `Bearer ${jwtToken}`,\r\n                user: safeUser\r\n            });\r\n        } catch (err) {\r\n            return res.status(500).json({\r\n                status: 'error',\r\n                message: err.message\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default UserController;\r\n"],"file":"userControllers.js"}