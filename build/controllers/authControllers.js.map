{"version":3,"sources":["../../server/src/controllers/authControllers.js"],"names":["AuthController","req","res","next","token","headers","authorization","status","json","message","jwtToken","split","jwt","verify","secret","decoded","user","isCaterer","Error","caterer"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;IAEMA,c;;;;;;;;;;;;+CAC2BC,G,EAAKC,G,EAAKC,I;;;;;;AAC7BC,gBAAAA,K,GAAQH,GAAG,CAACI,OAAJ,CAAYC,a;;oBACrBF,K;;;;;iDACMF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;AAKLC,gBAAAA,Q,GAAWN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,C;;;uBAESC,sBAAIC,MAAJ,CAAWH,QAAX,EAAqBI,mBAArB,C;;;AAAhBC,gBAAAA,O;AACNd,gBAAAA,GAAG,CAACe,IAAJ,GAAWD,OAAO,CAACC,IAAnB;AACAb,gBAAAA,IAAI;iDACG,I;;;;;iDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;;;;;;;;;;;;;;;;;;;gDAOeR,G,EAAKC,G,EAAKC,I;;;;;;AAC9BC,gBAAAA,K,GAAQH,GAAG,CAACI,OAAJ,CAAYC,a;;oBACrBF,K;;;;;kDACMF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;AAKLC,gBAAAA,Q,GAAWN,KAAK,CAACO,KAAN,CAAY,GAAZ,EAAiB,CAAjB,C;;;uBAESC,sBAAIC,MAAJ,CAAWH,QAAX,EAAqBI,mBAArB,C;;;AAAhBC,gBAAAA,O;;oBACDA,OAAO,CAACE,S;;;;;sBACH,IAAIC,KAAJ,CAAU,cAAV,C;;;AAEVjB,gBAAAA,GAAG,CAACkB,OAAJ,GAAcJ,OAAO,CAACI,OAAtB;AACAhB,gBAAAA,IAAI;kDACG,I;;;;;kDAEAD,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBD,kBAAAA,MAAM,EAAE,OADgB;AAExBE,kBAAAA,OAAO,EAAE;AAFe,iBAArB,C;;;;;;;;;;;;;;;;;;;;;eAQJT,c","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport secret from \"../db/jwt_secret\";\r\n\r\nclass AuthController {\r\n    static async verifyUserToken(req, res, next) {\r\n        const token = req.headers.authorization;\r\n        if (!token) {\r\n            return res.status(401).json({\r\n                status: 'error',\r\n                message: 'No Token Provided'\r\n            });\r\n        }\r\n        const jwtToken = token.split(' ')[1];\r\n        try {\r\n            const decoded = await jwt.verify(jwtToken, secret);\r\n            req.user = decoded.user;\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            return res.status(401).json({\r\n                status: 'error',\r\n                message: 'Invalid Auth Token'\r\n            });\r\n        }\r\n    }\r\n\r\n    static async verifyAdminToken(req, res, next) {\r\n        const token = req.headers.authorization;\r\n        if (!token) {\r\n            return res.status(401).json({\r\n                status: 'error',\r\n                message: 'No Token Provided'\r\n            });\r\n        }\r\n        const jwtToken = token.split(' ')[1];\r\n        try {\r\n            const decoded = await jwt.verify(jwtToken, secret);\r\n            if (!decoded.isCaterer) {\r\n                throw new Error('Unauthorized');\r\n            }\r\n            req.caterer = decoded.caterer;\r\n            next();\r\n            return true;\r\n        } catch (err) {\r\n            return res.status(401).json({\r\n                status: 'error',\r\n                message: 'Unauthorized'\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthController;\r\n"],"file":"authControllers.js"}